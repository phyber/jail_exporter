---
name: 'Create Github Release'

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: "write"

jobs:
  release:
    name: 'Create Github Release'
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v2'
        with:
          fetch-depth: 1
      - name: 'Install Toolchain'
        uses: 'dtolnay/rust-toolchain@v1'
        with:
          toolchain: 'stable'
      - name: 'Package Crate'
        # We can't verify here, because we're on Linux. We should be fine, if
        # we're tagging the tests have passed on CirrusCI.
        run: |
            cargo publish \
                --dry-run \
                --no-verify
      - name: 'Rename Crate to tar.gz'
        id: 'rename_crate'
        run: |
          CRATE_NAME="jail_exporter"
          STRIPPED_VERSION="$(basename ${{ github.ref }} | tr -d v)"
          RELEASE="${CRATE_NAME}-${STRIPPED_VERSION}"
          ASSET_DIR="target/package"
          ASSET_NAME="${RELEASE}.tar.gz"
          ASSET_PATH="${ASSET_DIR}/${ASSET_NAME}"

          cd "${ASSET_DIR}"
          mv "${RELEASE}.crate" "${ASSET_NAME}"

          echo "asset_name=${ASSET_NAME}" >> "${GITHUB_OUTPUT}"
          echo "asset_path=${ASSET_PATH}" >> "${GITHUB_OUTPUT}"
      - name: 'Generate Release Changelog'
        id: 'generate_changelog'
        run: |
          VERSION="$(basename ${{ github.ref }})"
          OUTPUT="release_changelog.md"

          # Add changelog for version
          sed -n "/^## ${VERSION}/,/^##/p;" CHANGELOG.md \
            | sed '$ d' \
            > "${OUTPUT}"

          # Add all links
          sed -n "/^<\!-- links -->/,//p;" CHANGELOG.md \
            >> "${OUTPUT}"

          echo "body_path=${OUTPUT}" >> "${GITHUB_OUTPUT}"
      - name: 'Create Release'
        id: 'create_release'
        uses: 'softprops/action-gh-release@v2'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          body_path: '${{ steps.generate_changelog.outputs.body_path }}'
          draft: false
          generate_release_notes: false
          fail_on_unmatched_files: true
          name: 'Release ${{ github.ref }}'
          prerelease: false
          tag_name: '${{ github.ref }}'
          files: |
            ${{ steps.rename_crate.outputs.asset_path }}
